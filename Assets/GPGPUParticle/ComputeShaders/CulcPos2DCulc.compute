#pragma kernel Culc
#pragma kernel Reset

#include "noise4d.hlsl"
#include "rand.hlsl"

RWTexture2D<float4> positionRenderTexture;
RWStructuredBuffer<float3> positionBuffer;
RWStructuredBuffer<float3> velocityBuffer;
RWStructuredBuffer<float3> lifeBuffer;
//RWStructuredBuffer<float3> particleParamsBuffer;
RWStructuredBuffer<float2> particleParamsBuffer;
RWStructuredBuffer<float3> randomBuffer;
RWStructuredBuffer<float2> preCulc;
float deltaTime;
float time;
float4 targetPos;


//billboard
float3 camPos;

//8x8に変更した方がいい
//[numthreads(16,1,1)]
[numthreads(16,16,1)]
void Culc (uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID)
{
    //todo grpu数は最終的にはC#側から送信する
    uint2 groupNum = uint2(6, 6);
    int offSetBlockNum = groupNum.x * groupID.y + groupID.x;
    uint threadSize = 16 * 16;
    uint2 threadSize2D = uint2(16, 16);
    int offSetThreadNum = threadSize * offSetBlockNum;
    ////参照場所を一意に特定する一次元1D
    int i = offSetThreadNum + groupThreadID.x + groupThreadID.y * threadSize2D.x;
    
    
    float3 pos = positionBuffer[i];
    float3 vel = velocityBuffer[i];
    float3 life = lifeBuffer[i];
    
    float3 toTarget = targetPos.xyz - pos;
    float3 vn = normalize(vel);
    float Dot = dot(toTarget, vn);
    float3 centripetalAccel = toTarget - (vn * Dot);
    float centripetalAccelMagnitude = length(centripetalAccel);
    
    //todo ifを使わなくてもできる表現への
    if (centripetalAccelMagnitude > 1.0){
        centripetalAccel /= centripetalAccelMagnitude;
    }
   
   
    
    //todo paramsBufferの送らなくてもいいものに対する最適化
    
    //float speed = length(vel);
    //float maxCentripetalAccel = speed * speed / particleParamsBuffer[i].x;
    //float propulsion = speed * particleParamsBuffer[i].y;
    float maxCentripetalAccel = preCulc[i].x;
    float propulsion = preCulc[i].y;
    
    float3 force = centripetalAccel * maxCentripetalAccel;
    force += vn * propulsion;
    force -= vel * particleParamsBuffer[i].y;
    
    
    //random項
    //float noisePower = pow(life.x - life.y, 0.5);
    //noisePower = clamp(noisePower, 0.0, 1.5);
    //float3 noise = curlNoise(float4(i*10.0, i*13.0, i*15.0, time));
    
    float3 noise = curlNoise(float4(pos.x*10.0, pos.y*10.0, pos.z, time*0.01)) * 0.1;
    //float3 noise = snoise3D(float4(id.x*id.x*1.0, id.y*id.y*1.0, i*1.0, time*0.001));
    //float3 noise = 0.1*(life.x - life.y)*curlNoise(float4(i, i, i, i));
    //float3 random = randomBuffer[i] * 0.1; 
    
    float random = rand(id);
    
    
    //offset用
    //force *= random;
    force += noise * randomBuffer[i]*(life.x - life.y) *  5.0;
    
    //散らす
    ///*
    //float3 up = float3(0.0, 1.0, 0.0);
    //float3 right = cross(up, normalize(vel));
    //right = normalize(right);
    //up = cross(normalize(vel), right);
    //vel += (right*random + up * random)*0.05;
    //vel += float3(cos(random), sin(random), 0.0) * 0.05; 
    //*/
    
    vel += (force * deltaTime); 
    
    pos += vel * deltaTime;
    //pos += noise*0.01;
    
   
    
    if(life.z == 0.0){
        //life.y = lifeBuffer[i].x; 
        //life.z = 1.0;
    }else{
        if(life.y < 0.0){
            life.y = 0.0;
            life.z = 0.0;
        }else{
            if(length(toTarget) < 1.0){
                life.y = 0.0;
            }else{
                life.y -= deltaTime;
            }
        }    
    }
    lifeBuffer[i] = life;
    
   
    
    positionBuffer[i] = pos; 
    velocityBuffer[i] = vel;
    positionRenderTexture[id] = float4(pos.x, pos.y, pos.z, 1.0);   
}



float2 resetVel;
[numthreads(16,16,1)]
void Reset (uint2 id : SV_DispatchThreadID, uint2 groupThreadID : SV_GroupThreadID, uint2 groupID : SV_GroupID){
    //todo grpu数は最終的にはC#側から送信する
    uint2 groupNum = uint2(6, 6);
    int offSetBlockNum = groupNum.x * groupID.y + groupID.x;
    uint threadSize = 16 * 16;
    uint2 threadSize2D = uint2(16, 16);
    int offSetThreadNum = threadSize * offSetBlockNum;
    //参照場所を一意に特定する一次元1D
    int i = offSetThreadNum + groupThreadID.x + groupThreadID.y * threadSize2D.x;
    
    float3 pos = positionBuffer[i];
    pos = float3(0.0, 0.0, 0.0);
    float3 vel = velocityBuffer[i];
    vel = float3(resetVel.x, resetVel.y, 1.0);
    
    //vel = normalize(vel);
    
    //vel = normalize(vel);
    
    
    positionBuffer[i] = pos;
    velocityBuffer[i] = vel;
    float3 life = lifeBuffer[i];
    life.y = life.x;
    life.z = 1.0;
    lifeBuffer[i] = life;
    positionRenderTexture[id] = float4(pos.x, pos.y, pos.z, 1.0);   
}
    